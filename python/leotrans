#!/usr/bin/env python

import argparse
import requests
from bs4 import BeautifulSoup

country_codes = ('de', 'en', 'fr', 'es')
section_choices = ["all", "verb", "subst", "adjadv", "phrase", "example"]

URL = "http://dict.leo.org/dictQuery/m-vocab/%(lang)s/query.xml?" \
      "tolerMode=nof&lp=%(lang)s&lang=de&rmWords=off&rmSearch=on&search=%(word)s&" \
      "searchLoc=0&resultOrder=basic&multiwordShowSingle=on"

lang = 'esde'  # language

xmlfilename = "leo.xml"


def translate(args, word, lang):
    def section(tag):
        return tag.parent.has_attr('sctName') and tag.parent['sctName'] == args.section

    r = requests.get(URL % {'lang': lang, 'word': word})
    soup = BeautifulSoup(r.text, 'xml')
    if args.write:
        with open(xmlfilename, 'w') as fh:
            fh.write(soup.prettify())
    if args.section.lower() == "all":
        entries = soup.find_all('entry')
    else:
        entries = soup.find_all(section)
    if entries:
        return [tuple([side.find('word').get_text()
                       for side in entry.find_all('side')])
                for entry in entries]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Leo Translator")
    parser.add_argument("-s", "--section", choices=section_choices,
                        default=section_choices[0], help="show only in section")
    parser.add_argument("-l", "--language", choices=list(country_codes),
                        default=list(country_codes)[-1], help="language code")
    parser.add_argument("-m", "--max", type=int, default=10, help="maximum number of results, default=%(default)d")
    parser.add_argument("-w", "--write", action="store_true", help="write received xml to file")
    parser.add_argument("-r", "--raw", action="store_true", help="output raw format")
    parser.add_argument("phrases", nargs='+', help="search phrases")
    args = parser.parse_args()
    lang = args.language + 'de'
    transdict = {word: translate(args, word, lang) for word in args.phrases}
    index = 1
    if args.raw:
        print(transdict)
    else:
        for word in transdict:
            if len(transdict) > 1:
                print('\n{}:'.format(word))
            if transdict[word]:
                transdict[word] = [trans for trans in transdict[word][:min(args.max, len(transdict[word]))] if trans]
                maxlen = max([len(trans[0]) for trans in transdict[word]])
                print(u"\n".join(u"{{:{}}}    {{}}".format(maxlen).format(*trans) for trans in transdict[word]))
            else:
                print('\tno translation found...')
